from slsdet import Mythen3,detectorSettings
from slsdet.lookup import view, find

from patterntools.zmqreceiver import ZmqReceiver
from detConf_module import *
from trimming import *


energy=7100
exptime=1
findex=0

nph=[2000,2000,1900,1800,1700,1600,1500,1400,1300,1200,1000,1000]

chanmask=[[1163, 1187, 1193, 1200, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 0], [733, 734, 735, 736], \
[1027, 1278],\
[0], \
[351],\
[29,  121, 184, 269, 342, 369,  444,  474,  522,  535,  546,  589,  622,  651,  665,  693,  735,  824,  827,  873,  879,  922, 1038, 1043, 1069, 1114, 1147, 1154, 1199, 1236, 1250, 1251, 1255, 1261, 1267], \
[32,  368,  370,  521 , 523,  544,  545,  547,  548,  572,  578,  579,  580,  592 ,  593,  594,  790,  900,  994,  995,  996, 1044, 1047, 1153, 1155, 1249], \
[967, 1007, 1006, 1008], \
[129, 257, 385, 513, 769],\
[  38,  60,   83,  105,  126,  156,  198,  204,  454,  744, 1186, 1190, 1191, 1192, 1196, 1202, 1204, 1206, 1211, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 0, 4],\
[ 257,  258,  259,  260,  261,  262,  263,  264,  265,  267,  269,  271,  273,  281,  376,  385,  432,  513,  514,  515,  523,  526,  529,  531,  533 , 539 , 769 , 771,  775,  777,  778,  783,  787,  795,  818,  887, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1034, 1037, 1047, 268 , 776 , 897 , 904 , 907 , 911 , 926 , 930 , 935 , 936 , 951, 1028, 1030], \
[36,  129,  132,  133,  135,  139,  141,  147,  165,  169,  235,  282,  317,  420,  445,  497,  549,  571,  696,  731,  737,  738,  739,  740,  741 , 742 , 743 , 744 , 745 , 746,  747,  748,  749,  750,  751,  752,  753,  754,  755,  756,  757,  758,  759,  760,  761,  762,  763,  764,  765,  766,  767,  769,  855,  899 , 901, 1003, 1038, 1045, 1077, 1119, 1124, 1133, 1149, 1156, 1177, 1190, 1205, 1214, 1257, 130,  131,  134,  136,  140,  142,  146,  148,  444 , 446 , 496 , 498 , 640 , 643, 644 , 645 , 647 , 649 , 651 , 656 , 659 , 661 , 664,  666,  667,  672,  673 , 678, 679 , 693 , 695 , 697 , 698 , 717, 1002, 1004, 1189, 1191, 1233],\
[752,  753,  754,  755,  756,  757,  758,  759,  760,  761,  762,  763,  764,  765, 766,  767,  896 , 897 , 898,  899,  900,  901,  902,  903,  904,  905,  906 , 907 ,  908,  909,  910,  911,  912,  913,  914,  915,  916 , 917 , 918,  919,  920,  921, 922 , 923,  924,  925,  926 , 927,  928,  929,  930,  931 , 932 , 933 , 934 , 935,  936,  937,  938,  939,  940,  941,  942,  943,  944,  945 , 946 , 947,  948,  949, 950 , 951 , 952 , 953 , 954 , 955 , 956 , 957 , 958 , 959 , 960 , 961 , 962,  963, 964 , 965 , 966 , 967 , 968 , 969,  970,  971,  972,  973,  974,  975,  976,  977,  978 , 979 , 980 , 981 , 982 , 983 , 984 , 985 , 986 , 987,  988 , 989 , 990 , 991 ,  992,  993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005,1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 643, 644, 646, 648, 649, 651, 653, 655, 657, 659, 660, 661, 662, 668, 669, 672, 673, 674,  675, 677, 680, 681, 684, 685, 687, 690, 705, 708, 718]]



d= Mythen3()
rx=makeReceiver(d)
d.exptime=exptime
d.findex=findex
fpath='/sls/X04SA/Data1/ES2/now/Mythen3_20200122/'+str(energy)+'eV/'


d.stopReceiver()
d.rx_zmqstream=1
d.rx_zmqfreq=1


for igain in range(3):
    if igain==0:
        setDefaultMode(d)
        gain="defaultGain"
    if igain==1:
        setHighestGainMode(d)
        gain="highestGain"
    if igain==3:
        setLowestGainMode(d)
        gain="lowestGain"
    if igain==2:
        setSuperHighGainMode(d)
        gain="superHighGain"
        

    for isett in range(3):
        if isett==0:
            d.settings=detectorSettings.STANDARD
            sett="standard"
            if igain==0:
                minthr=1200
            if igain==1:
                minthr=1500
            if igain==2:
                minthr=2400
        if isett==1:
            d.settings=detectorSettings.HIGHGAIN
            sett="highgain"
            if igain==0:
                minthr=1800
            if igain==1:
                minthr=2000
            if igain==2:
                minthr=2400
        if isett==2:
            d.settings=detectorSettings.FAST
            sett="fast"
            if igain==0:
                minthr=1200
            if igain==1:
                minthr=1500
            if igain==2:
                minthr=2400

            

        d.fpath=fpath+sett+'/'+gain+'/'
        ff=sett+'_'+gain+'_'+str(energy)+'eV_200V_'+str(int(1000*exptime))+'ms'

        print(d.fpath, ff)
        d.fname=ff
        #print(d.hostname)

        d.fwrite=1


        
        d.counters=[0,1,2]
        #minthr=1500
        maxthr=800
        thrstep=-1
        nsigma=5

        ind=d.findex

        if igain==0:
            vth,vtrim,trimbits=trim(ff, d,rx,minthr, maxthr, thrstep,nph, nsigma, chanmask, 1)
        else:
            d.trimval=0
            for ic in range(1):
                d.findex=ind
                d.fname=ff+'_TB0_c'+str(ic)
                d.counters=[ic]
                d.dacs.vth1=2800
                d.dacs.vth2=2800
                d.dacs.vth3=2800    
                if ic==0:
                    dac=dacIndex.VTH1
                elif ic==1:
                    dac=dacIndex.VTH2
                elif ic==2:
                    dac=dacIndex.VTH3
                print("*** Threshold scan counter",ic)
                data_thr= scan(d,rx,dac, minthr, maxthr, thrstep)

setDefaultMode(d)
